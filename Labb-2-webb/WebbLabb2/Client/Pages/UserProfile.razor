@page "/profile"
@inject IAuthService AuthService
@attribute [Authorize]
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<AuthorizeView>
    <h3 class="m-3">Hi! You're logged in with <i>@CurrentProfile.FirstName @CurrentProfile.LastName</i>.</h3>
</AuthorizeView>

<div class="container mb-5">
    <div class="row row-cols-4 d-flex align-items-center">
        <div class="col-3 m-3">
            <h5>FirstName</h5>
            <h5>LastName</h5>
            <h5>E-mail</h5>
            <h5>Telephone-Number</h5>
            <h5>Adress</h5>
        </div>
        <div class="col-6">
            <h5 class="fw-bolder">@CurrentProfile.FirstName</h5>
            <h5 class="fw-bolder">@CurrentProfile.LastName</h5>
            <h5 class="fw-bolder">@CurrentProfile.Email</h5>
            <h5 class="fw-bolder">@CurrentProfile.PhoneNumber</h5>
            <h5 class="fw-bolder">@CurrentProfile.Adress</h5>

        </div>
    </div>
</div>

<h3 class="mb-5 row d-flex flex-column align-items-center fw-bolder">Update Profile</h3>
@if (!_isProfileSubmitted)
{
    <EditForm Model="NewProfile" OnValidSubmit="UpdateProfile">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="firstname">First Name</label>
            <InputText id="firstname" @bind-Value="NewProfile.FirstName" class="form-control" />
            <ValidationMessage For="@(() => NewProfile.FirstName)" />
        </div>
        <div class="mb-3">
            <label for="lastname">Last Name</label>
            <InputText id="lastname" @bind-Value="NewProfile.LastName" class="form-control" />
            <ValidationMessage For="@(() => NewProfile.LastName)" />
        </div>
        <div class="mb-3">
            <label for="email">E-mail</label>
            <InputText id="email" @bind-Value="NewProfile.Email" class="form-control" />
            <ValidationMessage For="@(() => NewProfile.Email)" />
        </div>
        <div class="mb-3">
            <label for="phonenumber">Phone Number</label>
            <InputText id="phonenumber" @bind-Value="NewProfile.PhoneNumber" class="form-control" />
            <ValidationMessage For="@(() => NewProfile.PhoneNumber)" />
        </div>
        <div class="mb-3">
            <label for="adress">Adress</label>
            <InputText id="adress" @bind-Value="NewProfile.Adress" class="form-control" />
            <ValidationMessage For="@(() => NewProfile.Adress)" />
        </div>
        <button type="submit" class="btn btn-primary mb-5">Confirm</button>
    </EditForm>
}
else
{
    <p>Your profile has been updated! refresh page to check your new profilr</p>
}

<h3 class="mb-5 row d-flex flex-column align-items-center fw-bolder">Change Password</h3>

@if (!_isPasswordSubmitted)
{
    <EditForm Model="NewPassword" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="password">New Password</label>
            <InputText id="password" @bind-Value="NewPassword.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => NewPassword.Password)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirm New Password</label>
            <InputText id="confirmPassword" @bind-Value="NewPassword.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="@(() => NewPassword.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary">Apply</button>
    </EditForm>
}
else
{
    <p>Your password has been changed!</p>
}

@code {

    private UserPasswordDto NewPassword { get; set; } = new ();

    private UserProfileDto CurrentProfile { get; set; } = new ();

    private UserProfileDto NewProfile { get; set; } = new ();

    bool _isProfileSubmitted;
    bool _isPasswordSubmitted;


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        var id = authstate.User.FindFirst(ClaimTypes.NameIdentifier);
            if (id != null)
            {
               CurrentProfile = await AuthService.GetUserById(int.Parse(id.Value));
            }
    }


    private async Task ChangePassword()
    {
        _isPasswordSubmitted = true;
        var authenstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var id = authenstate.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await AuthService.ChangePassword(int.Parse(id), NewPassword);
        StateHasChanged();
    }

    private async Task UpdateProfile()
    {
        _isProfileSubmitted = true;
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var id = authstate.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await AuthService.UpdateProfile(int.Parse(id), NewProfile);
        StateHasChanged();
    }

}