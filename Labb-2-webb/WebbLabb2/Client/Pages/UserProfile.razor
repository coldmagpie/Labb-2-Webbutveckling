@page "/profile"
@using WebbLabb2.Client.Services.AuthService
@using Microsoft.AspNetCore.Components
@using WebbLabb2.Shared.DTOs
@using System.Reflection.Metadata
@inject IAuthService authService
@inject NavigationManager navigationManager
@attribute [Authorize]
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<AuthorizeView>
    <h3 class="m-3">Hi! You're logged in with <i>@user.FirstName @user.LastName</i>.</h3>
</AuthorizeView>

<div class="container mb-5">
    <div class="row row-cols-4 d-flex align-items-center">
        <div class="col-3 m-3">
            <h5>FirstName</h5>
            <h5>LastName</h5>
            <h5>E-mail</h5>
            <h5>Telephone-Number</h5>
            <h5>Adress</h5>
        </div>
        <div class="col-6">
            <h5 class="fw-bolder">@user.FirstName</h5>
            <h5 class="fw-bolder">@user.LastName</h5>
            <h5 class="fw-bolder">@user.Email</h5>
            <h5 class="fw-bolder">@user.PhoneNumber</h5>
            <h5 class="fw-bolder">@user.Adress</h5>

        </div>
    </div>
</div>

<h3 class="mb-5 row d-flex flex-column align-items-center fw-bolder">Update Profile</h3>
@if(!isSubmitted){
    <EditForm Model="newProfile" OnValidSubmit="UpdateProfile">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="firstname">First Name</label>
            <InputText id="firstname" @bind-Value="newProfile.FirstName" class="form-control" />
            <ValidationMessage For="@(() => newProfile.FirstName)" />
        </div>
        <div class="mb-3">
            <label for="lastname">Last Name</label>
            <InputText id="lastname" @bind-Value="newProfile.LastName" class="form-control"/>
            <ValidationMessage For="@(() => newProfile.LastName)" />
        </div>
        <div class="mb-3">
            <label for="email">E-mail</label>
            <InputText id="email" @bind-Value="newProfile.Email" class="form-control"/>
            <ValidationMessage For="@(() => newProfile.Email)" />
        </div>
        <div class="mb-3">
            <label for="phonenumber">Phone Number</label>
            <InputText id="phonenumber" @bind-Value="newProfile.PhoneNumber" class="form-control" />
            <ValidationMessage For="@(() => newProfile.PhoneNumber)" />
        </div>
        <div class="mb-3">
            <label for="adress">Adress</label>
            <InputText id="adress" @bind-Value="newProfile.Adress" class="form-control" />
            <ValidationMessage For="@(() => newProfile.Adress)" />
        </div>
        <button type="submit" class="btn btn-primary mb-5">Confirm</button>
    </EditForm>
}
else
{
    <p>Your profile has been updated!</p>
}

<h3 class="mb-5 row d-flex flex-column align-items-center fw-bolder">Change Password</h3>

@if (!isSubmitted)
{
    <EditForm Model="password" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="password">New Password</label>
            <InputText id="password" @bind-Value="password.Password" class="form-control" type="password"/>
            <ValidationMessage For="@(() => password.Password)"/>
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirm New Password</label>
            <InputText id="confirmPassword" @bind-Value="password.ConfirmPassword" class="form-control" type="password"/>
            <ValidationMessage For="@(() => password.ConfirmPassword)"/>
        </div>
        <button type="submit" class="btn btn-primary">Apply</button>
    </EditForm>
}
else
{
    <p>Your password has been changed!</p>
}

@code {

    UserPasswordDto password = new UserPasswordDto();

    UserProfileDto user = new UserProfileDto();

    UserProfileDto newProfile = new UserProfileDto();

    bool isSubmitted = false;


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = authstate.User.Identity.Name;

        user = await authService.GetUserById(int.Parse(userId));
    }

  
    private async Task ChangePassword()
    {
        isSubmitted = true;
        StateHasChanged();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = authstate.User.Identity.Name;
        var result = await authService.ChangePassword(int.Parse(userId), password);
    }
    private async Task UpdateProfile()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = authstate.User.Identity.Name;
        var result = await authService.UpdateProfile(int.Parse(userId), newProfile);

    }
   
}