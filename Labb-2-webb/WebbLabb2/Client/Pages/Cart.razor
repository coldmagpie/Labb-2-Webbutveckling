@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@implements IDisposable

<PageTitle>Cart</PageTitle>

<h3>Here comes your Cart!</h3>

@if (cartProducts is null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    @if (!isSubmitted)
    {
        <table class="table">
            <thead>
            <tr>
                <th ></th>
                <th >Product</th>
                <th >Price</th>
                <th >Quantity</th>
                <th >Total Price</th>
                <th >Delete</th>
                <th ></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var product in cartProducts)
            {
                <tr>
                    <td><img src="@product.Image" class="image"/></td>
                    <td>@product.Name</td>
                    <td >@product.Price /@(product.IsWeightable ? "kg" : "st")</td>
                    <div class="m-0 p-0">
                        <td>
                            <button class="btn btn-white text-black" @onclick="(() => UpdateQuantity(product, -1))">
                                <i class="oi oi-minus"></i>
                            </button>
                        </td>
                        <td>@product.Quantity</td>
                        <td>
                            <button class="btn btn-white text-black" @onclick="(() => UpdateQuantity(product, +1))">
                                <i class="oi oi-plus"></i>
                            </button>
                        </td>
                    </div>
                        <td>@Math.Round(product.Price * product.Quantity),2 kr</td>
                    <td><button class="btn btn-warning" @onclick="(() => RemoveProduct(product.ProductId))">
                        <i class="oi oi-trash"></i>
                    </button></td>
                </tr>
            }
            </tbody>
            <tfoot class="row d-flex justify-content-end align-items-end m-0 p-0">Total Price: @Math.Round(cartProducts.Sum(product => @product.Price * @product.Quantity),2) kr</tfoot>
        </table>
        <AuthorizeView>
            <Authorized>
                <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Apply Order</button>
            </Authorized>
            
            <NotAuthorized>
                <h5>Please <a href="login">login</a> or <a href="register">register</a> for a new account to apply order</h5>
            </NotAuthorized>
        </AuthorizeView>
    }
    else
    {
        <p>Order has been applied!</p>
    }
   
}



@code {
    List<CartProductDto> cartProducts;
    string message = "It's empty.....";
    bool isSubmitted;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
        CartService.CartChanged += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.CartChanged -= StateHasChanged;
    }

    private async Task RemoveProduct(int productId)
    {
        await CartService.RemoveProduct(productId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItems();
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "you have no product in the cart now!";
            cartProducts = new List<CartProductDto>();
        }
        cartProducts = await CartService.GetCartProducts();
    }

    private async Task UpdateQuantity(CartProductDto dto, int number)
    {
        dto.Quantity += number;
        if (dto.Quantity < 0 )
        {
            dto.Quantity = 0;
        }
        await CartService.UpdateQuantity(dto);
        await LoadCart();
    }

    private async Task PlaceOrder()
    {
        isSubmitted = true;
        StateHasChanged();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = int.Parse(authstate.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        await OrderService.PlaceOrder(userId, cartProducts);
        await CartService.ClearCart();
        CartService.CartChanged += StateHasChanged;
    }

}