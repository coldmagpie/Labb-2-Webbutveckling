@page "/cart"
@using WebbLabb2.Client.Services.CartService
@using WebbLabb2.Client.Services.AuthService
@using WebbLabb2.Shared.DTOs
@inject ICartService cartService
@inject IAuthService authService

<PageTitle>Cart</PageTitle>

<h3>Here comes your Cart!</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th >Product</th>
            <th  >Price</th>
            <th >Quantity</th>
            <th >Total Price</th>
            <th>Delete</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in cartProducts)
        {
            <tr>
                <td><img src="@product.Image" class="image"/></td>
                <td>@product.Name</td>
                <td >@product.Price /@(product.IsWeightable ? "kg" : "st")</td>
                <div class="m-0 p-0">
                    <td>
                        <button class="btn btn-white text-black" @onclick="(() => UpdateQuantity(product, -1))">
                            <i class="oi oi-minus"></i>
                        </button>
                    </td>
                    <td>@product.Quantity</td>
                    <td>
                        <button class="btn btn-white text-black" @onclick="(() => UpdateQuantity(product, +1))">
                            <i class="oi oi-plus"></i>
                        </button>
                    </td>
                </div>
                <td>-:@(product.Price * product.Quantity)</td>
                <td><button class="btn btn-warning" @onclick="(() => RemoveProduct(product.ProductId))">
                    <i class="oi oi-trash"></i>
                </button></td>
            </tr>
        }
        </tbody>
        <tfoot class="row d-flex justify-content-end align-items-end m-0 p-0">@Math.Round(cartProducts.Sum(product => @product.Price * @product.Quantity),2)</tfoot>
    </table>
    <button @*@onclick="PlaceOrder"*@ class="btn alert-success float-end mt-1">Checkout</button>
}



@code {
    List<CartProductDto> cartProducts = null;
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await authService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveProduct(int productId)
    {
        await cartService.RemoveProduct(productId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await cartService.GetCartItems();
        if ((await cartService.GetCartItems()).Count == 0)
        {
            message = "you have no product in the cart!";
            cartProducts = new List<CartProductDto>();
        }
        cartProducts = await cartService.GetCartProducts();
    }

    private async Task UpdateQuantity(CartProductDto dto, int number)
    {
        dto.Quantity += number;
        await cartService.UpdateQuantity(dto);
        await LoadCart();
    }

    //private async Task PlaceOrder()
    //{
    //    string url = await OrderService.PlaceOrder();
    //    NavigationManager.NavigateTo(url);
    //}

}