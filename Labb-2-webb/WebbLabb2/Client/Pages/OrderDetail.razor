@page "/order/{orderId:int}/detail"
@inject IOrderService OrderService
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@if (Order == null)
{
    <span>Loading order...</span>
}
else
{
    <h3>Order from @Order.DateTime.ToString("yyyy-MM-dd hh:mm:ss")</h3>

    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th >Product</th>
            <th  >Price</th>
            <th >Quantity</th>
            <th >Total Price</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in OrderItems)
        {
            <tr>
                <td><img src="@item.Product.ImageUrl" class="image"/></td>
                <td>@item.Product.Name</td>
                <td >@item.Product.Price/@(item.Product.IsWeightable ? "kg" : "st")</td>
                <td>@item.Quantity</td>
                <td>@(item.Product.Price * item.Quantity) kr</td>
            </tr>
        }
        </tbody>
        <tfoot class="row d-flex justify-content-end align-items-end m-0 p-0">Total Price: @Math.Round(OrderItems.Sum(item => @item.Product.Price * @item.Quantity),2) kr</tfoot>
    </table>
}

@code {
    [Parameter]
    public int OrderId { get; set; }

    OrderDto Order;
    List<OrderItemsDto> OrderItems;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userId = int.Parse(authstate.User.FindFirst(ClaimTypes.NameIdentifier).Value);
        Order = await OrderService.GetOrderById(userId, OrderId);
        OrderItems = await OrderService.GetOrderItems(userId, OrderId);
    }
}