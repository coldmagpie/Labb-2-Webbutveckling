@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Login</PageTitle>


<h3 class="row row-cols-4 flex-column align-items-center mb-4">Login</h3>


<EditForm Model="user" OnValidSubmit="LoginHandler">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row row-cols-4 d-flex flex-column align-items-center">
            <div class="mb-3">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="mb-3">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </div>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>
@code {
    private UserLoginDto user = new ();

    private string errorMessage = string.Empty;


    private async Task LoginHandler()
    {
        var result = await AuthService.Login(user);
        if (result.Error)
        {
            errorMessage = "Wrong user name or password";
        }
        else
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
    }
}