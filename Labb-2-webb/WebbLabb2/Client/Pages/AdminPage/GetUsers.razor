@page "/admin/users"
@page "/admin/searchuser/{searchText}"
@using WebbLabb2.Client.Services.UserService
@inject IUserService UserService
@implements IDisposable
@inject NavigationManager NavigationManager
@attribute [Authorize (Roles = "Administrator")]

<div class="input-group">
    <input @bind-value="searchText"
           @bind-value:event="oninput"
           type="search"
           list="users"
           @onkeyup="HandleSearch"
           class="form-control"
           placeholder="Search user here..."
           @ref="SearchInput" />
    <div>
        <button class="btn btn-dark text-white" @onclick="SearchUser">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>
</div>

@if (UserService.Users is not null)
{
    <div class="container">
        <div class="row m-lg-5 d-flex align-items-center">
            @foreach (var user in UserService.Users)
            {
                <div class="card col-lg-3 col-md-5 col-sm-10 m-4">
                    <div class="card-body">
                        <h4 class="card-title mb-1">@("ID: " + user.Id)</h4>
                        <h5 class="card-subtitle mb-1">@("First Name: " + user.FirstName)</h5>
                        <h5 class="card-subtitle mb-1">@("Last Name: " + user.LastName)</h5>
                        <h6 class="card-text">@("E-mail: " + user.Email)</h6>
                        <h6 class="card-text">@("Telephone: " + user.PhoneNumber)</h6>
                        <p class="card-text">@("Adress: " + user.Adress)</p>
                    </div>
                    <a href="@($"admin/userorders/{user.Id}")"><button class="btn btn-primary">Check orders</button></a>
                </div>
            }
        </div>
    </div>
}
<div class="d-flex fs-4 justify-content-center align-items-center">@message</div>

@code {

    private string? message { get; set; }
    [Parameter]
    public string searchText { get; set; }

    protected ElementReference SearchInput;

    protected override async Task OnParametersSetAsync()
    {
        if(searchText != null)
        {
            await UserService.GetUserByEmail(searchText);
            message = UserService.Users.Count == 0 ? $"User with email '{searchText}' is not found, please check the spelling" : "";
        }
        else
        {
            await UserService.GetAllUsers();
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        UserService.UsersChanged += StateHasChanged;
    }

    public void Dispose()
    {
        UserService.UsersChanged -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SearchInput.FocusAsync();
        }
    }

    public void SearchUser()
    {
        NavigationManager.NavigateTo($"admin/searchuser/{searchText}");
    }


    public void GoBack()
    {
        NavigationManager.NavigateTo("/admin/users");
        message = null;
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key is null or "Enter") 
        {
            if(string.IsNullOrEmpty(searchText))
            {
                GoBack();
            }
            else
            {
                SearchUser();
            }
        }
    }
}