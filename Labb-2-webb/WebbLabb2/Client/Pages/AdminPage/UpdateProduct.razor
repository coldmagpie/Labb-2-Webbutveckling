@page "/admin/updateproduct/{id:int}"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@attribute [Authorize (Roles = "Admin")]

@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="container">
        <div class="row align-items-center">
            <div class="col-6 col-sm-12 m-3">
                <img class="image" src="@product.ImageUrl" alt="@product.Name" />
            </div>
        </div>
        <div class="row flex-column">
            <div class="col-6 m-3">
                <h4>Name: @product.Name </h4>
                <h4>Number: @product.Number</h4>
                <h4>Description: @product.Description</h4>
                <h4>Price: @product.Price / @(product.IsWeightable ? "kg" : "st")</h4>
                <h4>In Stock: @(product.InStock ? "Yes" : "No") </h4>
            </div>
        </div>
    </div>
}

<h3 class="mb-5 row d-flex flex-column align-items-center fw-bolder">Update Product</h3>
@if (!isSubmitted)
{
    <EditForm Model="updateProduct" OnValidSubmit="ChangeProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="image">ImageUrl</label>
            <InputText id="image" @bind-Value="updateProduct.ImageUrl" class="form-control" />
            <ValidationMessage For="@(() => updateProduct.ImageUrl)" />
        </div>
        <div class="mb-3">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="updateProduct.Name" class="form-control" />
            <ValidationMessage For="@(() => updateProduct.Name)" />
        </div>
        <div class="mb-3">
            <label for="number">Product Number</label>
            <InputText id="number" @bind-Value="updateProduct.Number" class="form-control" />
            <ValidationMessage For="@(() => updateProduct.Number)" />
        </div>
        <div class="mb-3">
            <label for="description">Product Description</label>
            <InputText id="description" @bind-Value="updateProduct.Description" class="form-control" />
            <ValidationMessage For="@(() => updateProduct.Description)" />
        </div>
        <div class="mb-3">
            <label for="isWeightable">Is Weightable? (Check if true)</label>
            <InputCheckbox id="isWeightable" @bind-Value="updateProduct.IsWeightable" class="form-check-input" />
            <ValidationMessage For="@(() => updateProduct.IsWeightable)" />
        </div>
        <div class="mb-3">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="updateProduct.Price" class="form-control" />
            <ValidationMessage For="@(() => updateProduct.Price)" />
        </div>
        <div class="mb-3">
            <label for="categoryId">Category</label>
            <InputSelect class="form-select" @bind-Value="updateProduct.CategoryId" @onchange= "@SelectCategory">
                @foreach (var category in categories)
                {
                    @if (categories is null)
                    {
                        <option selected value="">None</option>
                    }
                    else
                    {
                        <option selected value="@category.Id">@category.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="inStock">In Stock? (Check if true)</label>
            <InputCheckbox id="inStock" @bind-Value="updateProduct.InStock" class="form-check-input" />
            <ValidationMessage For="@(() => updateProduct.InStock)" />
        </div>
        <button type="submit" class="btn btn-primary mb-5">Confirm</button>
    </EditForm>
}
else
{
    <p>Product has been updated!</p>
}

@code {
    private ProductDto? product;
    private string message = string.Empty;
    ProductDto updateProduct = new ();
    List<CategoryDto> categories = new();
    bool isSubmitted;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";
        product = await ProductService.GetProductById(Id);
    }
    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllCategories();
    }
    void SelectCategory(ChangeEventArgs e)
    {
        updateProduct.CategoryId = categories.First(c => c.Id.ToString() == e.Value?.ToString()).Id;
    }
    private async Task ChangeProduct()
    {
        isSubmitted = true;
        StateHasChanged();
        await ProductService.UpdateProduct(product.Id, updateProduct);
    }
}